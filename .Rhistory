library(tensorflow)
install.packages("keras")
?install_tensorflow
install_keras()
library(keras)
install_tensorflow()
install.packages("keras")
library(keras)
install_keras()
1
t
#Example: Recognising handwritten digits
library(keras); library(tensorflow)
mnist <- dataset_mnist()
#Example: Recognising handwritten digits
library(keras); library(tensorflow)
mnist <- dataset_mnist()
mnist
View(mnist)
x_train <- mnist$train$x
y_train <- mnist$train$y
x_train
View(x_train)
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
dim(x_train)
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
dim(x_train)
dim(x_test)
head(y_train)
head(y_test)
View(mnist)
values ranging between 0 and 1:
# reshape
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
# rescale
x_train <- x_train / 255
x_test <- x_test / 255
head(y_train)
#The y data is an integer vector with values ranging from 0 to 9 (which refers to the handwritten digit). To prepare this data for training we one-hot encode the vectors into binary
#class matrices using the to_categorical() function:
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
head(y_train)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 10, activation = 'softmax')
We can now use summary() to have a look at the parameters of the model:
summary(model)
#So, the model has 235, 146 unknown parameters that need to be estimated.
#We can now compile the model choosing an appropriate loss function (loss), optimisation
#algorithm (optimizer), and performance evaluation metrics (metrics):
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
#Training and evaluation
#Use the fit() function to train the model:
set.seed(1)
history <- model %>% fit(
x_train, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
history <- model %>% fit(
x_train, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
plot:
#We can now evaluate the modelâ€™s performance on the test data:
model %>% evaluate(x_test, y_test)
model %>% evaluate(x_test, y_test)
#and generate predictions:
model %>% predict_classes(x_test) %>% head
predict_classes(x_test)
#and generate predictions:
model %>% predict_classes(x_test) %>% head
model %>% predict_classes(x_test)
